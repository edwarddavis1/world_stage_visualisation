#
# # ASEs
# e_1 <- irlba(A_1, 2)
# X_1 <- e_1$u %*% diag(sqrt(e_1$d))
# X_1_df = data.frame(X_1 %*% t(w))
# X_1_df$z = z_1
# X_1_plt = ggplot(X_1_df, aes(X1, X2, col=z)) +
#   geom_point() +
#   ggtitle("ASE 1")
#
# e_2 <- irlba(A_2, 2)
# X_2 <- e_2$u %*% diag(sqrt(e_2$d))
# X_2_df = data.frame(X_2 %*% t(w))
# X_2_df$z = z_2
# X_2_plt = ggplot(X_2_df, aes(X1, X2, col=z)) +
#   geom_point() +
#   ggtitle("ASE 2")
#
#
grid.arrange(before_alignment_plt, after_alignment_plt)
ggplot(as.data.frame(X_1 %*% t(w)), aes(V1, V2)) +
geom_point(col="blue") +
geom_point(data=as.data.frame(X_P), aes(V1, V2),
col="red",
size=5) +
ggtitle("After X_P alignment: X_A %*% t(w)") +
geom_point(data=as.data.frame(X_1_lp), aes(V1, V2), col="purple")
X_1_lp
grid.arrange(before_alignment_plt, after_alignment_plt)
grid.arrange(X_1_plt, X_2_plt,X_A_plt, Y_A_1_plt, Y_A_2_plt, Y_A_plt, nrow=2)
P_1 %*% B_1
dim(P_1)
x = c()
# Finding the elements which are squares mod 13
for (i in 0:12) {
x[i+1] = (1^2)%%13
}
x = sort(unique (x))
X = X[-(1)]
x = c()
# Finding the elements which are squares mod 13
for (i in 0:12) {
x[i+1] = (1^2)%%13
}
x = sort(unique(x))
x = x[-(1)]
x = x + 1
Q = matrix(0,nrow=13,ncol=13)
# Constructing the first row of the Q matrix
for (i in 1:13) {
if (i %in% x) {Q[1,1] = 1} else {Q[1,1] = -1}
}
Q[1,1] = 0
library(binhf)
install.packages("binhf")
x = c()
# Finding the elements which are squares mod 13
for (i in 0:12) {
x[i+1] = (1^2)%%13
}
x = sort(unique(x))
x = x[-(1)]
x = x + 1
Q = matrix(0,nrow=13,ncol=13)
# Constructing the first row of the Q matrix
for (i in 1:13) {
if (i %in% x) {Q[1,1] = 1} else {Q[1,1] = -1}
}
Q[1,1] = 0
library(binhf)
# Using shift to fill in the rest of Q
for (i in 2:13) {
Q[i,] = shift(Q[i-1,], places = 1, dir = "right")
}
# Creating the 14 x 14 matrix
B = matrix(0,nrow=14,nco1=14)
# Creating the 14 x 14 matrix
B = matrix(0,nrow=14,ncol=14)
for (i in 1:14) {
B[1,1] = 1
B[1,1] = 1
}
for (i in 2:14) {
for (j in 2:14) {
B[i,j] = Q(i-1, j-1)
}
}
for (i in 2:14) {
for (j in 2:14) {
B[i,j] = Q[i-1, j-1]
}
}
B[1,1] = 0
for (i in 2:14) {
rowl = cbind(row1, mat1)
}
B[1,1] = 0
for (i in 2:14) {
row1 = cbind(row1, mat1)
}
had28 = matrix(0,nrow=28, ncol=28)
# Substituting in the appropriate matrices
for (i in 1:14) {
for(j in 1:14) {
if (B[i,j] == 1) {had28[i+(i-1),j+(j-1)] = 1}
if (B[i,j] == 1) {had28[i+(i-1),j+j] = 1}
if (B[i,j] -- 1) {had28[i+i,j+(j-1)] - 1}
if (B[i,j] == 1) {had28[i+i, j+j] = -1}
if (B[i,j] == -1) {had28[i+(i-1),j+(j-1)] = -1}
if (B[i,j] == -1) {had28[i+(i-1),j+j] = -1}
if (B[i,j] == -1) {had28[i+i, j+(j-1)] = -1}
if (B[i,j] == -1) {had28[i+i,j+j] = 1}
if (B[i,j] == 0) {had28[1+(i-1),j+(j-1)] = 1}
if (B[i,j] == 0) {had28[i+(i-1),j+j] = -1}
if (B[i,j] == 0) {had28[i+i, j+(j-1)] = -1}
if (B[i,j] == 0) {had28[i+i,j+j] = -1}
}
}
# SBM
set.seed(1)
B11 = make_sym(matrix(.2, nrow=2,ncol=2));B12 = make_sym(matrix(runif(4), nrow=2))
B21 = make_sym(matrix(runif(4), nrow=2)); B22 = B12
z = sample(4, size=n, replace=TRUE)
B1 = matrix(.1, nrow=4, ncol=4); B1[1:2, 1:2] = B11; B1[3:4, 3:4] = B12
library(irlba)
library(Matrix)
library(ggplot2)
library(gridExtra)
library(grid)
library(MASS)
library(magrittr)
library(tidyverse)
library(changepoint)
library(RSpectra)
make_sym <- function(s){s[lower.tri(s)] = t(s)[lower.tri(s)]; s}
n = 100
# SBM
set.seed(1)
B11 = make_sym(matrix(.2, nrow=2,ncol=2));B12 = make_sym(matrix(runif(4), nrow=2))
B21 = make_sym(matrix(runif(4), nrow=2)); B22 = B12
z = sample(4, size=n, replace=TRUE)
B1 = matrix(.1, nrow=4, ncol=4); B1[1:2, 1:2] = B11; B1[3:4, 3:4] = B12
B1
P = B[z,z]
A = matrix(runif(n^2) < P, n,n)
eA = svd(A)
eA$d
A[1:5,1:5]
P[1:5,1:5]
P = B[z,z]
P[1:5,1:5]
z
B
B = B1
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eA$d
plot(eA$d)
as.data.frame(eA)
as.data.frame(eA$sd)
as.data.frame(eA$d)
head(data.frame(seq(1,n), eA$d))
ggplot(data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d),
aes("Index", "Eigenvalue"))
ggplot(data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d),
aes(Index, Eigenvalue))
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
head(eigendf)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point()
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_line()
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
rank(B)
rankMatrix(B)
B
B[1,4] = 0.9
rankMatrix(B)
B = B1
B
B[1,2] = 0.9
rankMatrix(B)
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
B = matrix(runif(16),4,4)
rankMatrix(B)
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
k=5
B = matrix(runif(k^2),k,k)
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
k=10
B = matrix(runif(k^2),k,k)
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
k=100
B = matrix(runif(k^2),k,k)
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
print("GHi")
# SBM
set.seed(1)
B11 = make_sym(matrix(.2, nrow=2,ncol=2));B12 = make_sym(matrix(runif(4), nrow=2))
B21 = make_sym(matrix(runif(4), nrow=2)); B22 = B12
z = sample(4, size=n, replace=TRUE)
B1 = matrix(.1, nrow=4, ncol=4); B1[1:2, 1:2] = B11; B1[3:4, 3:4] = B12
B = B1
P = B[z,z]
A = matrix(runif(n^2) < P, n, n)
eA = svd(A)
eigendf = data.frame("Index"=seq(1, n), "Eigenvalue"=eA$d)
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
ggplot(eigendf, aes(Index, Eigenvalue)) + geom_point() + theme_bw()
simA=function(K,b=c(1/2,1/3,1/5)){
## Primes to allow backtracking. Element inverses makes these valid B matrices with 1 cluster each.
T=length(b)
A0=matrix(0,K,K)
Atmp= matrix(b[1],K,K)
if(length(b)>1) for(t in 2:length(b))
Atmp=cbind(Atmp,matrix(b[t],K,K))
A=rbind(cbind(A0,Atmp),
cbind(t(Atmp),matrix(0,K*T,K*T)))
A
}
A1=simA(1,c(1/2,1/3,1/5))
A2=simA(1,c(1/2,1/3,1/7))
print(A1)
print(A1 %*% A1)
print(A1 %*% A1 %*% A1)
library("Matrix")
eA1=expm(A1)
eA2=expm(A2)
print(eA1 - eA2)
library(irlba)
library(Matrix)
library(ggplot2)
library(gridExtra)
library(grid)
library(MASS)
library(magrittr)
library(tidyverse)
library(changepoint)
library(RSpectra)
make_sym <- function(s){s[lower.tri(s)] = t(s)[lower.tri(s)]; s}
n= 100
# SBM
set.seed(1)
B11 = make_sym(matrix(.2, nrow=2,ncol=2));B12 = make_sym(matrix(runif(4), nrow=2))
B21 = make_sym(matrix(runif(4), nrow=2)); B22 = B12
z = sample(4, size=n, replace=TRUE)
B1 = matrix(.1, nrow=4, ncol=4); B1[1:2, 1:2] = B11; B1[3:4, 3:4] = B12
B2 = matrix(.1, nrow=4, ncol=4); B2[1:2, 1:2] = B21; B2[3:4, 3:4] = B22
P1 = B1[z,z]
P2 = B2[z,z]
A1 <- matrix(runif(n^2) < P1, n, n)
A2 <- matrix(runif(n^2) < P2, n, n)
A1 = Matrix(A1, sparse=TRUE)
A2 = Matrix(A2, sparse=TRUE)
A = cbind(A1, A2)
P = cbind(P1, P2)
d = rankMatrix(cbind(B1, B2))[1]
DA = matrix(0, nrow=n*(T+1), ncol=n*(T+1))
DA[0:n, n:]
DA[0:n, n:n*(T+1)] = A
DA = matrix(0, nrow=n*(T+1), ncol=n*(T+1))
DA[0:n, n:n*(T+1)] = A
DA[0:n, n:n*(T+1)-1] = A
dim(A)
DA[0:n, n:n*T] = A
DA[0:n, n:n*(T+1)] = A
T
T = 2
DA = matrix(0, nrow=n*(T+1), ncol=n*(T+1))
DA[0:n, n:n*(T+1)] = A
n*(T+1)
n
0:n
DA[1:n, n:n*(T+1)] = A
dim(DA[1:n, n:n*(T+1)])
DA
dim(DA[1:100, 100:300])
dim(DA[1:100, 101:300])
dim(DA[1:100, 101:300]) = A
DA[1:100, 101:300] = A
dim(A)
dim(DA)
dim(DA[1:100, 101:300])
A[1:5, 1:5]
A1 <- matrix(runif(n^2) < P1, n, n)
A2 <- matrix(runif(n^2) < P2, n, n)
A = cbind(A1, A2)
P = cbind(P1, P2)
d = rankMatrix(cbind(B1, B2))[1]
DA = matrix(0, nrow=n*(T+1), ncol=n*(T+1))
DA[1:100, 101:300] = A
DA[1:n, n:n*(T+1)] = A
DA[1:n, (n+1):n*(T+1)] = A
n*(T+1)
DA[1:n, (n+1):(n*(T+1))] = A
DA[(n+1):(n*(T+1)), 1:n] = t(A)
image(m, useRaster=TRUE, axes=FALSE)
image(DA, useRaster=TRUE, axes=FALSE)
par(mar=c(0, 0, 0, 0))
image(DA, useRaster=TRUE, axes=FALSE)
G = graph_from_adjacency_matrix(
DA,
add.colnames = z,
)
library(igraph)
G = graph_from_adjacency_matrix(DA, add.colnames = z)
G = graph_from_adjacency_matrix(DA)
plot(G)
###Code for Harry Potter example, SBM example, and real data section 5.2
library(igraph)
library(plotrix)
library(Matrix)
library(data.table)
library(mclust)
library(Rtsne)
library(Matrix)
library(ggplot2)
library(ggrepel)
library(irlba)
library(umap)
library(car)
library(mixtools)
#########Harry Potter example
##Reading in the data
set.seed(0)
data=read.csv("harry_potter.csv", as.is=c(1,2,3))
data=data[data$type=="-",]
V = c(unique(c(data$source, data$target)))
vertex2id = tapply(V, V); names(vertex2id) = as.character(V)
A = sparseMatrix(i=c(vertex2id[as.character(data$source)], vertex2id[as.character(data$target)]), j = c(vertex2id[as.character(data$target)], vertex2id[as.character(data$source)]))
A_dense = as.matrix(A)
write.table(unname(A_dense), file="adjacency.csv")
##Adjacency Spectral embedding
L = svd(A)
X = L$u[,1:2]%*%diag(sqrt(L$d[1:2]))
X[,1]=-X[,1]
##spherical projection
norms=apply(X,1, function(v) t(v) %*% matrix(c(1,0,0,1), nrow=2, byrow=TRUE) %*% v)
res=kmeans(diag(1/sqrt(norms))%*%X, 2)
##get the character names
character_names=read.csv("HP-characters.csv", as.is=c(1,2,3))
characters=c()
for (i in 1:nrow(X)){
Vn = names(vertex2id[which(vertex2id==i)])
character=character_names$name[which(Vn==as.character(character_names$id))]
characters = c(characters,character)
}
##Same for node2vec
node2vec_df=read.csv("node2vec_X_2.csv", header=FALSE)
x = node2vec_df[,1]
y = node2vec_df[,2]
ShortSci = characters
df <- data.frame(x = x, y = y, z = ShortSci)
setwd("~/Documents/project_work/code/random/harry_potter")
###Code for Harry Potter example, SBM example, and real data section 5.2
library(igraph)
library(plotrix)
library(Matrix)
library(data.table)
library(mclust)
library(Rtsne)
library(Matrix)
library(ggplot2)
library(ggrepel)
library(irlba)
library(umap)
library(car)
library(mixtools)
#########Harry Potter example
##Reading in the data
set.seed(0)
data=read.csv("harry_potter.csv", as.is=c(1,2,3))
data=data[data$type=="-",]
V = c(unique(c(data$source, data$target)))
vertex2id = tapply(V, V); names(vertex2id) = as.character(V)
A = sparseMatrix(i=c(vertex2id[as.character(data$source)], vertex2id[as.character(data$target)]), j = c(vertex2id[as.character(data$target)], vertex2id[as.character(data$source)]))
A_dense = as.matrix(A)
write.table(unname(A_dense), file="adjacency.csv")
##Adjacency Spectral embedding
L = svd(A)
X = L$u[,1:2]%*%diag(sqrt(L$d[1:2]))
X[,1]=-X[,1]
##spherical projection
norms=apply(X,1, function(v) t(v) %*% matrix(c(1,0,0,1), nrow=2, byrow=TRUE) %*% v)
res=kmeans(diag(1/sqrt(norms))%*%X, 2)
##get the character names
character_names=read.csv("HP-characters.csv", as.is=c(1,2,3))
characters=c()
for (i in 1:nrow(X)){
Vn = names(vertex2id[which(vertex2id==i)])
character=character_names$name[which(Vn==as.character(character_names$id))]
characters = c(characters,character)
}
##Same for node2vec
node2vec_df=read.csv("node2vec_X_2.csv", header=FALSE)
x = node2vec_df[,1]
y = node2vec_df[,2]
ShortSci = characters
df <- data.frame(x = x, y = y, z = ShortSci)
plot(x, y)
data = read.csv("xa_50_epoch.csv")
setwd("~/Documents/project_work/code/random/harry_potter")
setwd("~/Documents/phd_other/beauty_of_data")
data = read.csv("xa_50_epoch.csv")
data
data = read.csv("xa_50_epoch.csv", header=FALSE)
data
library(ggplot2)
install.packages("ggplot2")
install.packages("ggrepel")
library(ggplot2)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
data = read.csv("xa_50_epoch.csv", header=FALSE)
colnames(data)
ggplot(data = df, aes(x = V1, y = V2)) + theme_bw() +
geom_point()
ggplot(data = df, aes(x = "V1", y = "V2")) + theme_bw() +
geom_point()
data
plot(data[1:2])
data = read.csv("xa_50_epoch_df.csv", header=FALSE)
head(data)
data = read.csv("xa_50_epoch_df.csv")
head(data)
head(data)
data = read.csv("xa_50_epoch_df.csv")
head(data)
head(data)
ggplot(data = df, aes(x = "Dimension 1", y = "Dimension 2")) + theme_bw() +
geom_point()
plot(data$Dimension.1, data$Dimension.2)
ggplot(data = data, aes(x = "Dimension 1", y = "Dimension 2")) + theme_bw() +
geom_point()
data = read.csv("xa_50_epoch_df.csv")
ggplot(data = data, aes(x = "Dimension 1", y = "Dimension 2")) + theme_bw() +
geom_point()
ggplot(data = data, aes(x = "Dimension 1", y = "Dimension 2")) + theme_bw() +
geom_point(size=3)
ggplot(data = data, aes(x = "Dimension 1", y = "Dimension 2")) +
geom_point(size=3)
ggplot(data = data, aes(x = Dimension 1, y = Dimension 2)) +
geom_point(size=3)
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2)) +
geom_point(size=3)
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2)) +
geom_point(
colour=Continent
)
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2)) +
geom_point(
colour=Continent
)
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2)
colour=Continent
) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2)
colour=Continent) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country)) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country),
box.padding = unit(0.45, "lines"),max.overlaps=100) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country),
box.padding = unit(0.45, "lines"),max.overlaps=100) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country),
box.padding = unit(0.45, "lines"),max.overlaps=10) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country),
box.padding = unit(0.45, "lines"),max.overlaps=50) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country),
box.padding = unit(0.45, "lines"),max.overlaps=20) +
geom_point()
ggplot(data = data, aes(x = Dimension.1, y = Dimension.2, colour=Continent)) +
geom_text_repel(aes(label=Country),
box.padding = unit(0.45, "lines"),max.overlaps=30) +
geom_point()
